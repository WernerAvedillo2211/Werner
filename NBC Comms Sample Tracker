import pandas as pd
import matplotlib.pyplot as plt
import matplotlib.patches as mpatches
from datetime import datetime
import traceback
import sys
def build_dashboard(force_20=True,cols=4):
 df=xl("Web_Sample_Tracker_ALL_BD[#All]",headers=True)
 if not {"Buying Director","Red Flag Reason","Date Added"}.issubset(set(df.columns)):raise KeyError("Missing columns")
 df["Buying Director"]=df["Buying Director"].fillna("").astype(str).str.strip()
 df["Red Flag Reason"]=df["Red Flag Reason"].fillna("").astype(str).str.strip()
 df["Date Added"]=pd.to_datetime(df["Date Added"],errors='coerce')
 df=df[["Buying Director","Red Flag Reason","Date Added"]].copy()
 counts=df[df["Red Flag Reason"]!=""]["Buying Director"].value_counts().to_dict()
 today=datetime.now().date()
 seven_ago=today-pd.Timedelta(days=7)
 def recent(n):
  rows=df[(df["Buying Director"]==n)&(df["Date Added"].notna())]
  if rows.empty:return False
  for d in rows["Date Added"]:
   dt=d.date() if hasattr(d,'date') else d
   if seven_ago<=dt<=today:return True
  return False
 rec={b:recent(b) for b in df["Buying Director"].unique() if b.strip()}
 dirs=list(dict.fromkeys(df["Buying Director"].tolist()))
 names=[d for d in dirs if d!=""]
 if force_20:
  names=names[:20]
  while len(names)<20:names.append("")
 def abbr(n):
  if not n or not n.strip():return n
  p=n.strip().split()
  if len(p)==1:return p[0]
  return f"{p[0][0].upper()}. {p[-1]}"
 def red_clr(c,m):
  if c<=0 or m<=0:return "#90EE90"
  i=float(c)/float(m)
  return "#FFA07A" if i<=0.33 else "#DC143C" if i<=0.66 else "#B22222"
 mc=max(counts.values()) if counts else 0
 co={"#00C400":0,"#2BFF6A":1,"#FF7070":2,"#FF0033":3,"#C90000":4}
 def clr(n):
  if not n or not n.strip():return "#00C400"
  c=counts.get(n,0)
  if c>0:return red_clr(c,mc)
  return "#2BFF6A" if rec.get(n,False) else "#00C400"
 names=sorted(names,key=lambda n:(co.get(clr(n).upper(),99),counts.get(n,0)))
 while len(names)<24:names.append("")
 fig,ax=plt.subplots(figsize=(14,max(4,len(names)*0.3)))
 ax.axis('off')
 bw,bh,xg,yg=0.18,0.055,0.24,0.07
 for i,n in enumerate(names):
  if not n or n.strip()=="":continue
  r,c,ct=i//cols,i%cols,counts.get(n,0)
  dn,col=abbr(n),clr(n)
  mk="✓" if ct==0 else "⚠"
  x,y=0.05+c*xg,0.92-r*yg
  tc="white" if col.upper() in {"#8B0000","#B22222","#DC143C","#FF6347","#C90000","#FF0033"} else "black"
  ax.add_patch(mpatches.FancyBboxPatch((x,y-0.04),bw,bh,boxstyle="round,pad=0.003",transform=ax.transAxes,facecolor=col,edgecolor="#888",linewidth=0.8))
  ax.text(x+0.015,y-0.0125,mk,transform=ax.transAxes,fontsize=12,va="center",weight="bold",color=tc)
  ax.text(x+0.045,y-0.0125,dn,transform=ax.transAxes,fontsize=14,va="center",weight="bold",color=tc)
 leg=[mpatches.Patch(facecolor='#00C400',edgecolor='#888',label='✓ No Errors'),mpatches.Patch(facecolor='#FFA07A',edgecolor='#888',label='⚠ Low Error Count'),mpatches.Patch(facecolor='#2BFF6A',edgecolor='#888',label='✓ Only New Errors'),mpatches.Patch(facecolor='#DC143C',edgecolor='#888',label='⚠ Medium Error Count'),mpatches.Patch(facecolor='none',edgecolor='none',label=' '),mpatches.Patch(facecolor='#B22222',edgecolor='#888',label='⚠ High Error Count')]
 ax.legend(handles=leg,loc="lower center",ncol=2,fontsize=10,frameon=True,bbox_to_anchor=(0.5,0.4),columnspacing=1,markerscale=1.5)
 ax.text(0.5,0.97,"Website Sample Trackers Error Status",transform=ax.transAxes,fontsize=15,weight="bold",ha="center")
 ax.text(0.02,0.3,f"Table generated 11:59 AM - 28/10/2025",transform=ax.transAxes,fontsize=10,style="italic",color="black")
 plt.tight_layout()
 plt.show()
def main():
 build_dashboard(force_20=False,cols=4)
if __name__=="__main__":
 try:main()
 except Exception:
  tb=traceback.format_exc()
  try:xl("G7",tb.splitlines()[-1] if tb.splitlines() else tb)
  except:pass
  raise